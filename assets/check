#!/bin/sh
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.bash
assets_dir=$(cd $(dirname $0) && pwd)

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)
ignorefile=$(mktemp /tmp/gitignore.XXXXXX)

cat > $payload <&0

load_pubkey $payload

uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
paths="$(jq -r '(.source.paths // [])[]' < $payload)" # those "'s are important
ref=$(jq -r '.version.ref // ""' < $payload)

jq -r '(.source.ignore_paths // [])[]' < $payload > $ignorefile

destination=/tmp/resource-in-git-dir

if [ -d $destination ]; then
  cd $destination
  git pull --ff-only
else
  branchflag=""
  if [ -n "$branch" ]; then
    branchflag="--branch $branch"
  fi

  git clone $uri $branchflag $destination
  cd $destination
fi

filter_files() {
  git ls-files -- $paths | while read gitfile; do
    echo "considering: $gitfile..." >&2
    if git -c core.excludesfile=${ignorefile} check-ignore --no-index $gitfile >/dev/null; then
      echo "  ignoring" >&2
    else
      echo "  keeping" >&2
      echo $gitfile
    fi
  done
}

{
  if [ -n "$ref" ]; then
    filter_files | xargs git log --reverse ${ref}..HEAD --pretty='format:%H' --
  else
    filter_files | xargs git log -1 --pretty='format:%H' --
  fi
 } | jq -R '.' | jq -s "map({ref: .})" >&3
