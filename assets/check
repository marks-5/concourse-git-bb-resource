#!/bin/sh
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.bash

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)
cat > $payload <&0

load_pubkey $payload

uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
paths="$(jq -r '(.source.paths // [])[]' < $payload)" # those "'s are important
ignore_paths_regex="$(jq -r '(.source.ignore_paths // []) | join("|")' < $payload)" # these ones, too
ref=$(jq -r '.version.ref // ""' < $payload)

destination=/tmp/resource-in-git-dir

if [ -d $destination ]; then
  cd $destination
  git pull --ff-only
else
  branchflag=""
  if [ -n "$branch" ]; then
    branchflag="--branch $branch"
  fi

  git clone $uri $branchflag $destination
  cd $destination
fi


glob_to_regex() {
  $(dirname $0)/glob_to_regex.pl $1
}

if [ -n "$ignore_paths_regex" ]; then
  paths="$(git ls-files | egrep -v "${ignore_paths_regex}")"
fi

{
  if [ -n "$ref" ]; then
    if [ -n "$paths" ]; then
      echo "$paths" | xargs git log --reverse ${ref}..HEAD --pretty='format:%H' --
    else
      git rev-list --reverse ${ref}..HEAD
    fi
  else
    if [ -n "$paths" ]; then
      echo "$paths" | xargs git log -1 --pretty='format:%H' --
    else
      git rev-parse HEAD
    fi
  fi
 } | jq -R '.' | jq -s "map({ref: .})" >&3
