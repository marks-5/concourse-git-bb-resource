#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.bash

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXX)

cat > $payload <&0

load_pubkey $payload

uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
ref=$(jq -r '.version.ref // "HEAD"' < $payload)
fetch=$(jq -r '(.params.fetch // [])[]' < $payload)

if [ -z "$uri" ]; then
  echo "invalid payload (missing uri):" >&2
  cat $payload >&2
  exit 1
fi

branchflag=""
if [ -n "$branch" ]; then
  branchflag="--branch $branch"
fi

git clone $uri $branchflag $destination --depth 10

cd $destination

git checkout -q $ref
git log -1 --oneline
git clean --force --force -d
git submodule update --init --recursive

for branch in $fetch; do
  git fetch origin $branch
  git branch $branch FETCH_HEAD
done

jq -n "{
  version: {ref: $(git rev-parse HEAD | jq -R .)},
  metadata: $(git_metadata)
}" >&3
