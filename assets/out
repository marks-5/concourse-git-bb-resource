#!/bin/sh
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.bash

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)

cat > $payload <&0

load_pubkey $payload

uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
repository=$(jq -r '.params.repository // ""' < $payload)
rebase=$(jq -r '.params.rebase // false' < $payload)

if [ -z "$uri" ]; then
  echo "invalid payload (missing uri)"
  exit 1
fi

if [ -z "$branch" ]; then
  echo "invalid payload (missing branch)"
  exit 1
fi

if [ -z "$repository" ]; then
  echo "invalid payload (missing repository)"
  exit 1
fi

cd $source
cd $repository

git remote add push-target $uri

if [ "$rebase" = "true" ]; then
  while true; do
    git pull --rebase push-target $branch

    if git push --tags push-target HEAD:refs/heads/$branch 2>&1 | tee /tmp/push-failure; then
      break
    fi

    # failed for reason other than non-fast-forward
    if ! grep non-fast-forward /tmp/push-failure 2>/dev/null; then
      exit 1
    fi

    echo "rebasing and trying again..."
  done
else
  git push --tags push-target HEAD:refs/heads/$branch
fi

jq -n "{
  version: {ref: $(git rev-parse HEAD | jq -R .)},
  metadata: $(git_metadata)
}" >&3
