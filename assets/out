#!/bin/sh
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)

cat > $payload <&0

load_pubkey $payload

uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
repository=$(jq -r '.params.repository // ""' < $payload)
rebase=$(jq -r '.params.rebase // false' < $payload)

if [ -z "$uri" ]; then
  echo "invalid payload (missing uri)"
  exit 1
fi

if [ -z "$branch" ]; then
  echo "invalid payload (missing branch)"
  exit 1
fi

if [ -z "$repository" ]; then
  echo "invalid payload (missing repository)"
  exit 1
fi

cd $source
cd $repository

git remote add push-target $uri

if [ "$rebase" = "true" ]; then
  while true; do
    echo "rebasing..."

    git pull --rebase push-target $branch

    # oh god this is really the only way to do this
    result_file=$(mktemp /tmp/git-result.XXXXXX)

    echo 0 > $result_file

    {
      git push --tags push-target HEAD:refs/heads/$branch 2>&1 || {
        echo $? > $result_file
      }
    } | tee /tmp/push-failure

    # despite what you may think, the embedded cat does not include the
    # trailing linebreak
    #
    # $() appears to trim it
    #
    # someone rewrite this please
    #
    # pull requests welcome
    if [ "$(cat $result_file)" = "0" ]; then
      echo "pushed"
      break
    fi

    # failed for reason other than non-fast-forward / fetch-first
    if ! grep -q '\[rejected\]' /tmp/push-failure; then
      echo "failed with non-rebase error"
      exit 1
    fi

    echo "rebasing and trying again..."
  done
else
  git push --tags push-target HEAD:refs/heads/$branch
fi

jq -n "{
  version: {ref: $(git rev-parse HEAD | jq -R .)},
  metadata: $(git_metadata)
}" >&3
